#Github action 워크플로우 시작 시 마다 새로운 가상 머신 생성. 실행 후 자동으로 삭제

name: Spring boot Blog CI/CD

on:
    push:
        branches: ["main"]
        paths:
            - "blog-springboot-jpa/**" # 서브디렉토리 경로 추가
    pull_request:
        branches: ["main"]
        paths:
            - "blog-springboot-jpa/**"

jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 10
        defaults:
            run:
                working-directory: ./blog-springboot-jpa # 작업 디렉토리 설정

        steps:
            - uses: actions/checkout@v4 # 저장소 코드를 워크플로우 환경으로 체크아웃. 즉 GitHub 저장소 코드를 runner의 작업 디렉토리로 복사

            - name: JDK 17 설정
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"

            - name: Gradle 캐시
              uses: actions/cache@v4 # 빌드 의존성 캐싱으로 빌드 시간 단축, Gradle/Maven 의존성 캐싱. key로 캐시 존재 확인, 없으면 restore-keys 사용. 작업 완료 후 자동 캐시 저장
              with:
                  path: |
                      ~/.gradle/caches 
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: ${{ runner.os }}-gradle-

            - name: 테스트 및 빌드
              run: |
                  echo "===== 현재 작업 디렉토리 ====="
                  pwd
                  echo "===== 빌드 전 디렉토리 구조 ====="
                  ls -la
                  echo "===== Gradle 빌드 실행 ====="
                  chmod +x gradlew
                  ./gradlew clean build --info
                  echo "===== 빌드 후 디렉토리 구조 ====="
                  ls -la
                  echo "===== build/libs 확인 ====="
                  ls -la build/libs/

            - name: 테스트 결과 저장
              if: always()
              uses: actions/upload-artifact@v4 # 빌드/테스트 결과물 저장 및 공유. 빌드된 JAR 파일 저장, 테스트 리포트 저장, 코드 커버리지(jacoco) 리포트 저장. 다른 워크플로우에서 재사용 할수도 있음
              with:
                  name: test-results
                  path: build/reports/tests/test/

            - name: 테스트 커버리지 생성
              run: ./gradlew jacocoTestReport

            - name: 빌드 결과물 저장
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: ${{ github.workspace }}/blog-springboot-jpa/build/libs/*.jar
                  if-no-files-found: error  # 파일을 찾지 못하면 에러 발생

    deploy:
        needs: build # build job이 성공적으로 완료된 후 실행
        runs-on: ubuntu-latest
        timeout-minutes: 10
        defaults:
            run:
                working-directory: ./blog-springboot-jpa

        steps:
            # - name: libs 디렉토리 생성 # 추가
            # run: |
            # mkdir -p build/libs

            - name: 빌드 결과물 다운로드
              uses: actions/download-artifact@v4
              with:
                  name: build-artifact
                  path: build/libs

            - name: AWS 자격증명 구성
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2

            - name: EC2 SSH 키 생성 # secrets.EC2_SSH_PRIVATE_KEY를 출력 후 blog-springboot-key.pem 파일로 생성 및 저장 후에 소유자에게만 "읽기" 권한 설정. 첫번째는 소유자 읽기(4), 두번째는 그룹의 권한, 세번째는 다른 사용자의 권한
              run: |
                  echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > blog-springboot-key.pem
                  chmod 400 blog-springboot-key.pem

            - name: EC2 호스트 키 설정
              run: |
                  # .ssh 디렉토리가 있다면 아무 일도 일어나지 않음, EC2 서버의 SSH 공개 키를 자동으로 가져온 후에 known_hosts 파일에 추가
                  # .ssh 폴더는 GitHub Actions 러너(Runner)에 생성.
                  # 맨처음에 ssh에 접속할때 서버의 호스트 키를 확인하는 수동 확인 과정이 필요한데 이를 자동화 함.
                  mkdir -p ~/.ssh 
                  ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

            - name: EC2에 배포
              run: |
                  # 이전 버전 백업
                  ssh -i blog-springboot-key.pem ec2-user@${{ secrets.EC2_HOST }} "
                      cd /home/ec2-user/app
                      # || true: 이 부분은 "혹시 오류가 발생하더라도 명령어가 실패하지 않도록" 하는 구문
                      cp blog-springboot-jpa-1.0.0.jar blog-springboot-jpa-1.0.0.jar.backup || true
                  "

                  # 새 버전 배포, 줄 끝에 \는 가독성 향상을 위해 줄바꿈 용도
                  scp -i blog-springboot-key.pem \
                      build/libs/blog-springboot-jpa-1.0.0.jar \
                      ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app/

                  # 애플리케이션 재시작 with 롤백
                  ssh -i blog-springboot-key.pem ec2-user@${{ secrets.EC2_HOST }} "
                      cd /home/ec2-user/app
                      if ! docker-compose up -d app; then
                        echo '배포 실패. 롤백 시작...'
                        # .backup 파일을 원래 파일 이름으로 복원
                        mv blog-springboot-jpa-1.0.0.jar.backup blog-springboot-jpa-1.0.0.jar
                        docker-compose up -d app
                        exit 1
                      else 
                        echo '배포 성공'
                      fi
                      rm -f blog-springboot-jpa-1.0.0.jar.backup
                  "
