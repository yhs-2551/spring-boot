name: Spring boot Blog CI/CD

on:
    push:
        branches: ["main"]
        paths:
            - "blog-springboot-jpa/**" # blog-springboot-jpa 폴더의 변경사항만 감지
    pull_request:
        branches: ["main"]
        paths:
            - "blog-springboot-jpa/**" # blog-springboot-jpa 폴더의 변경사항만 감지

jobs:
    build:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./blog-springboot-jpa # 작업 디렉토리 설정

        steps:
            # 기본 체크아웃
            - uses: actions/checkout@v4

            # JDK 17 설정
            - name: JDK 17 설정
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"

            # Gradle 캐시 설정: 빌드 속도 향상 및 의존성 재다운로드 방지
            # ~는 홈 디렉토리를 의미 (Windows에서는 C:\Users\{사용자이름})
            - name: Gradle 캐시
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.gradle/caches 
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: ${{ runner.os }}-gradle-

            # 테스트를 포함한 빌드
            - name: 테스트 및 빌드
              run: |
                  chmod +x gradlew
                  ./gradlew clean build

            # 테스트 결과 저장
            - name: 테스트 결과 저장
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results
                  path: build/reports/tests/test/

            # 테스트 커버리지 리포트
            - name: 테스트 커버리지 생성 - Jacoco
              run: ./gradlew jacocoTestReport

            # 빌드 결과물 저장
            - name: 빌드 결과물 파일 저장
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: build/libs/*.jar

        # CD를 위한 준비 (현재는 비활성화)
        # - name: Configure AWS credentials
        #   uses: aws-actions/configure-aws-credentials@v1
        #   with:
        #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #     aws-region: ap-northeast-2
