server:
    port: 8000

redirect:
    frontendUrl: http://localhost:3000

# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring:
    main:
        banner-MODE: "off"

    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/blog_jpa?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
        username: root
        password: root

    devtools:
        restart:
            enabled: true
        livereload:
            enabled: true

    jpa:
        # Uncomment if using standard MySQL dialect (for MySQL versions below 8)
        # database-platform: org.hibernate.dialect.MySQLDialect

        # Hibernate 6.x부터는 dialect 자동 감지
        # database-platform: org.hibernate.dialect.MySQL8Dialect

        # Disables the "Open Session in View" pattern to avoid keeping database sessions open in the view layer
        open-in-view: false

        # update: 매 시작마다 스키마 검사(엔티티가 정의하는 테이블 구조) 및 업데이트(이에따라 엔티티에 Enum이 있으면 앱 시작 시 mysql enum과 자바 enum 동기화를 위해 alter쿼리가 발생함)
        # validate: 엔티티-테이블 매핑 검증. 운영환경 사용
        hibernate:
            ddl-auto: update

        # Spring Boot의 JPA 설정 레벨  System.out으로 출력되는 SQL문을 보기 좋게 출력해줌
        show-sql: false

        properties:
            hibernate:
                # Formats SQL output to make it more readable (prints SQL statements in an organized format)
                format_sql: true
                show_sql: false # Hibernate 내부 설정 레벨 Hibernate가 생성하는 SQL문을 출력해줌
                use_sql_comments: true #JPQL과 실제 SQL 쿼리가 함께 출력
                highlight_sql: true
                # Enables detailed logging for Hibernate parameter values
                type.descriptor.sql: trace

    batch:
        job:
            enabled: false # true면 앱 시작 시 스케줄러에 의해 관리되는 job을 제외하고 모든 Job이 자동 실행. 나의 경우 직접 제어하므로 false로 설정
        jdbc:
            initialize-schema: never # 배치 메타테이블 생성/업데이트용. 운영환경에선 never 로컬 개발 환경에선 always

    servlet:
        multipart:
            # Single file size limit
            max-file-size: 10MB
            # Total request size limit
            max-request-size: 20MB
    data:
        redis:
            repositories:
                enabled: false
            # Redis settings
            host: localhost
            port: 6379

    security:
        oauth2:
            client:
                registration:
                    google:
                        # Later change environment
                        # Registration, ??? ?? provider? ?? ??. ?? ???? ???? provider?? ?? ??
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET}
                        redirect-uri: http://localhost:8000/login/oauth2/code/google
                        authorization-grant-type: ${GOOGLE_AUTHORIZATION_GRANT_TYPE}
                        scope: ${GOOGLE_SCOPE}
                provider:
                    google:
                        authorization-uri: ${GOOGLE_AUTHORIZATION_URI}

    mail:
        host: smtp.gmail.com
        port: 587
        username: ${MAIL_USERNAME}
        password: ${MAIL_PASSWORD}
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true

# jwt issuer settings, secret key is located in JwtProperties file
# jwt의 경우 케밥 케이스인 "-"로 구분, @ConfigurationProperties("jwt")를 사용하면 secretKeyString과 같이 카멜 케이스를 쓸 수 있지만 명확하게 쓰기 위해 이렇게 사용
jwt:
    issuer: ${JWT_ISSUER}
    secret-key-string: ${JWT_SECRET_KEY}

# aws s3 settings
# aws sdk의 경우 jwt와는 다르게 케밥케이스가 아닌 단어 사이 대문자로 구분하는 카멜 케이스 사용
aws:
    accessKeyId: ${AWS_ACCESS_KEY_ID}
    secretKey: ${AWS_SECRET_ACCESS_KEY}
    s3:
        bucketName: ${AWS_S3_BUCKET_NAME}
        region: ${AWS_REGION}

# 아래는 없어도 기본값으로 되긴 할텐데 일단 추가
springdoc:
    swagger-ui:
        path: /swagger-ui.html # Swagger UI 접속 경로
        tags-sorter: alpha # API 태그 알파벳 정렬
        operations-sorter: method # HTTP 메서드별 정렬
    api-docs:
        path: /v3/api-docs # OpenAPI 명세 JSON 경로
    default-consumes-media-type: application/json # 기본 요청 타입
    default-produces-media-type: application/json # 기본 응답 타입

management:
    endpoints:
        web:
            exposure:
                include: "*" # 개발 환경에서는 모든 엔드포인트 활성화. 운영 환경에서는 health,metrics,prometheus 이것만
    endpoint:
        health:
            show-details: always # 상세한 헬스 체크 정보 표시
    info:
        env:
            enabled: true # http://localhost:8000/actuator/info 에서 확인. 애플리케이션 기본 정보, 환경 정보, 빌드 정보 등이 JSON 형태로 제공

    metrics:
        tags:
            application: blog-springboot-jpa # 메트릭에 애플리케이션 이름 태그 추가
        distribution:
            percentiles-histogram:
                "[http.server.requests]": true # HTTP 요청에 대한 히스토그램 메트릭 수집 / . 마침표가 있어서 []로 감싸서 특수문자 이스케이프 해야함
    prometheus:
        metrics:
            export:
                enabled: true # 프로메테우스 메트릭 익스포트 활성화
