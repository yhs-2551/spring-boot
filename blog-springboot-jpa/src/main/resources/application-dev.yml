server:
    port: 8000

# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring:
    datasource:
        # Sets the Log4jdbc driver to enable SQL logging (helps in tracking SQL queries)
        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
        url: jdbc:log4jdbc:mysql://localhost:3306/blog_jpa?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
        username: root
        password: root

    devtools:
        restart:
            enabled: true
        livereload:
            enabled: true

    jpa:
        # Uncomment if using standard MySQL dialect (for MySQL versions below 8)
        # database-platform: org.hibernate.dialect.MySQLDialect

        # Sets Hibernate dialect to MySQL8Dialect for MySQL 8.x versions
        database-platform: org.hibernate.dialect.MySQL8Dialect

        # Disables the "Open Session in View" pattern to avoid keeping database sessions open in the view layer
        open-in-view: false

        hibernate:
            ddl-auto: update

        # Enables SQL logging, showing SQL statements executed by Hibernate
        show-sql: true

        properties:
            hibernate:
                # Formats SQL output to make it more readable (prints SQL statements in an organized format)
                format_sql: true

                # Enables detailed logging for Hibernate parameter values
                type: trace

    batch:
        job:
            enabled: false # true면 앱 시작 시 스케줄러에 의해 관리되는 job을 제외하고 모든 Job이 자동 실행. 나의 경우 직접 제어하므로 false로 설정
        jdbc:
            initialize-schema: always # 배치 메타테이블 생성/업데이트용

    servlet:
        multipart:
            # Single file size limit
            max-file-size: 10MB
            # Total request size limit
            max-request-size: 20MB
    data:
        redis:
            # Redis settings
            host: localhost
            port: 6379

    elasticsearch:
        uris: http://localhost:9200

    security:
        oauth2:
            client:
                registration:
                    google:
                        # Later change environment
                        # Registration, ??? ?? provider? ?? ??. ?? ???? ???? provider?? ?? ??
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET}
                        redirect-uri: ${GOOGLE_REDIRECT_URI}
                        authorization-grant-type: ${GOOGLE_AUTHORIZATION_GRANT_TYPE}
                        scope: ${GOOGLE_SCOPE}
                provider:
                    google:
                        authorization-uri: ${GOOGLE_AUTHORIZATION_URI}

    mail:
        host: smtp.gmail.com
        port: 587
        username: ${MAIL_USERNAME}
        password: ${MAIL_PASSWORD}
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true

# jwt issuer settings, secret key is located in JwtProperties file
jwt:
    issuer: ${JWT_ISSUER}
    secret-key-string: ${JWT_SECRET_KEY}

# aws s3 settings
aws:
    accessKeyId: ${AWS_ACCESS_KEY_ID}
    secretKey: ${AWS_SECRET_ACCESS_KEY}
    s3:
        bucketName: ${AWS_S3_BUCKET_NAME}
        region: ${AWS_REGION}
