server.port=8000

#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Sets the Log4jdbc driver to enable SQL logging (helps in tracking SQL queries)
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/blog_jpa?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root


# Uncomment if using standard MySQL dialect (for MySQL versions below 8)
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Sets Hibernate dialect to MySQL8Dialect for MySQL 8.x versions
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Disables the "Open Session in View" pattern to avoid keeping database sessions open in the view layer
spring.jpa.open-in-view=false

spring.jpa.hibernate.ddl-auto=update

# Enables SQL logging, showing SQL statements executed by Hibernate
spring.jpa.show-sql=true

# Formats SQL output to make it more readable (prints SQL statements in an organized format)
spring.jpa.properties.hibernate.format_sql=true

# Enables detailed logging for Hibernate parameter values
spring.jpa.properties.hibernate.type=trace

# Enables SQL logging for Hibernate at the debug level
# Logs the SQL query itself every time SQL is executed by Hibernate
logging.level.org.hibernate.SQL=debug

# Enables tracing for Hibernate SQL parameter binding (shows parameter values in SQL logs)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#file & image upload limit settings
#single file size limit
spring.servlet.multipart.max-file-size=10MB
#total request size limit
spring.servlet.multipart.max-request-size=20MB

#jwt issuer settings, secret key is located in JwtProperties file
jwt.issuer=${JWT_ISSUER}
jwt.secret-key-string=${JWT_SECRET_KEY}

#later change environment
#registration, ??? ?? provider? ?? ??. ?? ???? ???? provider?? ?? ??
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.authorization-grant-type=${GOOGLE_AUTHORIZATION_GRANT_TYPE}
spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE}

#aws s3 settings
aws.accessKeyId=${AWS_ACCESS_KEY_ID}
aws.secretKey=${AWS_SECRET_ACCESS_KEY}
aws.s3.bucketName=${AWS_S3_BUCKET_NAME}
aws.s3.region=${AWS_REGION}

#redis settings
spring.redis.host=localhost
spring.redis.port=6379